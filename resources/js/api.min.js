/*!
 * Copyright (C) 2021-2021 by DeVeLab [develab.uk]
 *
 * This software is furnished under a license and may be used and copied *
 * only  in  accordance  with  the  terms  of such  license and with the *
 * inclusion of the above copyright notice.  This software  or any other *
 * copies thereof may not be provided or otherwise made available to any *
 * other person.  No title to and  ownership of the  software is  hereby *
 * transferred.                                                          *
 *                                                                       *
 * You may not reverse  engineer, decompile, defeat  license  encryption *
 * mechanisms, or  disassemble this software product or software product *
 * license.  DeVeLAB UK may terminate this license if you don't *
 * comply with any of the terms and conditions set forth in our end user *
 * license agreement (EULA).  In such event,  licensee  agrees to return *
 * licensor  or destroy  all copies of software  upon termination of the *
 * license.                                                              *
 *                                                                       *
 * Please see the EULA file for the full End User License Agreement.     *
 * -----------------------------------------------------------------------
*/
!function(e, t) {
    "function" == typeof define && define.amd ? define([], function() {
        return t()
    }) : "object" == typeof exports ? module.exports = t() : window.ApiRequest = t()
}("undefined" != typeof global ? global : "undefined" != typeof window ? window : this, function(e) {
    if ("undefined" == typeof jQuery)
        throw new Error("Api lib requires jQuery");
    if (parseInt(jQuery.fn.jquery.split(".").join("")) < 351)
        throw new Error("Api Library has been build on Jquery 3.5.1. Your version is " + jQuery.fn.jquery + " please get last jquery or the version 3.5.1");
    return function(e) {
        let a = {
            url: "/",
            type: "POST",
            async: !0,
            csrf: !0,
            data: null,
            dataType: "JSON",
            loader: {
                searchFor: "#paginations",
                addClass: "loader"
            },
            appendTo: "#pagination-loader"
        }
          , t = ($.extend(a, e),
        {
            init: function() {
                return this.startRequest()
            },
            startRequest: function() {
                let n = new XMLHttpRequest;
                return new Promise(function(e, t) {
                    n.open(a.type, a.url, a.async),
                    !0 === a.csrf && n.setRequestHeader("X-CSRF-TOKEN", $('meta[name="csrf-token"]').attr("content")),
                    n.addEventListener("loadstart", function(e) {
                        $(a.loader.searchFor).addClass(a.loader.addClass)
                    }),
                    n.addEventListener("load", function() {
                        //console.log(this.readyState),
                        4 === this.readyState ? 200 === this.status ? (!1 !== a.appendTo && $(a.appendTo).html(this.response),
                        e(this.response)) : t(this.status) : t(this.readyState)
                    }, !0),
                    n.addEventListener("loadend", function(e) {}),
                    n.addEventListener("readystatechange", function(e) {}, !0),
                    null !== a.data ? (n.responseType = "",
                    n.setRequestHeader("Content-Type", "application/json"),
                    a.data = JSON.stringify(a.data)) : (n.responseType = "",
                    n.setRequestHeader("Content-Type", "text/html; charset=UTF-8")),
                    n.send(a.data),
                    n.onload = function() {}
                }
                )
            }
        });
        return t.init()
    }
});
